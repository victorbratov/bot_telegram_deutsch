from aiogram import types
from dispatcher import dp, bot
from config import cur, conn
from FSM_classes import FSMuser_data, FSMtake_test
from keyboards import *
from aiogram.dispatcher import FSMContext
from handlers.methods import compile_text_message, sending_question, update_average_score, put_val_users, \
    check_if_convertable_to_int


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    us_id = message.from_user.id
    us_name = message.from_user.username
    us_activity = 0
    put_val_users(user_id=us_id, user_name=us_name, user_activity=us_activity)
    u_id = message.from_user.id
    cur.execute("SELECT user_name FROM users WHERE user_id = '%s' " % u_id)
    u_name = cur.fetchone()
    mess = "–ü—Ä–∏–≤–µ—Ç, " + ''.join(u_name)
    await bot.send_message(message.from_user.id, mess)
    await bot.send_message(message.from_user.id, "deutsch_bot - —ç—Ç–æ telegram bot —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –µ–≥–æ "
                                                 "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –Ω–µ–º–µ—Ü–∫–∏–º —è–∑—ã–∫–æ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏ "
                                                 "–ø—Ä–æ–≥—Ä–µ—Å—Å–∏—Ä–æ–≤–∞—Ç—å –≤ –µ–≥–æ –∏–∑—É—á–µ–Ω–∏–∏. –Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤?")
    await FSMuser_data.level_user.set()
    await message.answer("–∫–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –Ω–µ–º–µ—Ü–∫–æ–≥–æ?", reply_markup=level_kb)


@dp.message_handler(state=FSMuser_data.level_user)
async def put_user_level(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_level'] = message.text
    await FSMuser_data.next()
    await message.answer("—Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ (–≤–≤–µ–¥–∏—Ç–µ —á–∏–ª–æ –æ—Ç 1 –¥–æ 7)?",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=FSMuser_data.how_often)
async def put_how_often(message: types.Message, state: FSMContext):
    if not check_if_convertable_to_int(message):
        await message.answer("—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    if int(message.text) <= 0:
        await message.answer("—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    async with state.proxy() as data:
        data['how_often'] = int(message.text)
        data["text_num"] = 1
        cur.execute('UPDATE users SET (user_level, how_often) = (?, ?) WHERE user_id = ?',
                    (data['user_level'], data['how_often'], message.from_user.id))
        conn.commit()
        cur.execute("UPDATE users SET text_num = ? WHERE (user_id, text_num) = (?,?)",
                    (data["text_num"], message.from_user.id, None))
        conn.commit()
        cur.execute("SELECT text_num FROM users WHERE user_id = '%s'" % message.from_user.id)
        print(cur.fetchone())
    await state.finish()
    await message.answer("–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=standart_kb)


@dp.message_handler(commands=["–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è"])
async def settings(message: types.Message):
    await message.answer("settings", reply_markup=settings_kb)


@dp.message_handler(commands=['–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'])
async def upd_freq(message: types.Message):
    await message.answer("—Ä–∞–∑ –≤ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ (–≤–≤–µ–¥–∏—Ç–µ —á–∏–ª–æ –æ—Ç 1 –¥–æ 7)")
    await FSMuser_data.upd_freq.set()


@dp.message_handler(state=FSMuser_data.upd_freq)
async def update_frequency(message: types.Message, state: FSMContext):
    if not check_if_convertable_to_int(message):
        await message.answer("—ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    if int(message.text) <= 0:
        await message.answer("—á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
        return
    async with state.proxy() as data:
        data['how_often'] = message.text
        cur.execute('UPDATE users SET how_often = ? WHERE user_id = ?',
                    (data['how_often'], message.from_user.id))
        conn.commit()
    await state.finish()
    await message.answer("–≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", reply_markup=standart_kb)


@dp.message_handler(commands=['–ø–æ–¥–¥–µ—Ä–∂–∫–∞'])
async def command_help(message: types.Message):
    await message.answer(
        "—Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:\n\n/start - –Ω–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è(—É—Ä–æ–≤–µ–Ω—å "
        "–Ω–µ–º–µ—Ü–∫–æ–≥–æ, —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)\n\n/–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å_—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —á–∞—Å—Ç–æ—Ç–µ "
        "—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n\n/–Ωo–≤—ã–π_—Ç–µ–∫—Å—Ç - "
        "–ø—Ä–∏—à–ª–µ—Ç –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç\n\n–æ—Ç–º–µ–Ω–∞ - –µ—Å–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–æ –æ—Ç–º–µ–Ω–∞, –ø–æ–∫–∞ –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, "
        "–∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n–ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—Å–∞—Ç—å @victorbratov", reply_markup=standart_kb)


@dp.message_handler(commands=['–º–æ—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def see_stats(message: types.Message):
    cur.execute('SELECT text_num FROM users WHERE user_id = "%s"' % message.from_user.id)
    tr = int(''.join(map(str, cur.fetchone()))) - 1
    cur.execute("SELECT average_score FROM users WHERE user_id = '%s'" % message.from_user.id)
    asc = float(''.join(map(str, cur.fetchone())))
    msg = "–ø—Ä–æ—á–∏—Ç–∞–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤: " + str(tr) + "\n" + "–≤–∞—à —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∑–∞ —Ç–µ—Å—Ç: " + str(round(asc)) + "%"
    await message.answer(msg, reply_markup=standart_kb)


@dp.message_handler(commands=['–Ω–æ–≤—ã–π_—Ç–µ–∫—Å—Çüìñ'])
async def send_text(message: types.Message):
    cur.execute("SELECT text_num FROM users WHERE user_id = '%s'" % message.from_user.id)
    tn = int(''.join(map(str, cur.fetchone())))
    await compile_text_message(tn, message)
    cur.execute("SELECT question_number FROM texts WHERE order_text = '%s'" % tn)
    qn = int(''.join(map(str, cur.fetchone())))
    if qn > 0:
        await message.answer("–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º —Ç–µ—Å—Ç –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞?", reply_markup=yesno_kb)
        await FSMtake_test.will_take.set()
    else:
        cur.execute("UPDATE users SET text_num = ? WHERE user_id = ?", (tn + 1, message.from_user.id))
        conn.commit()
        await message.answer("–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑", reply_markup=standart_kb)


@dp.message_handler(state=FSMtake_test.will_take)
async def will_take(message: types.Message, state: FSMContext):
    if message.text == "–¥–∞":
        await message.answer("—É–¥–∞—á–∏", reply_markup=types.ReplyKeyboardRemove())
        async with state.proxy() as data:
            (data['test_num'], data['q_order']) = await sending_question(message)
            data["rn_count"] = 0
            await FSMtake_test.next()
    else:
        cur.execute("SELECT text_num FROM users WHERE user_id = '%s'" % message.from_user.id)
        tn = int(''.join(map(str, cur.fetchone())))
        cur.execute("UPDATE users SET text_num = ? WHERE user_id = ?", (tn + 1, message.from_user.id))
        conn.commit()
        await state.finish()
        await message.answer("–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑", reply_markup=standart_kb)


@dp.message_handler(state=FSMtake_test.answer_question)
async def answer_q(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        user_a = message.text
        data["q_order"] = int(data["q_order"]) + 1
        cur.execute("SELECT right_a FROM questions WHERE (test_number, q_order) = (?,?)",
                    (data["test_num"], data["q_order"]))
        rn = ''.join(cur.fetchone())
        data["q_order"] = int(data["q_order"]) - 1
        if user_a == rn:
            data["rn_count"] = int(data["rn_count"]) + 1
            await message.answer("‚úÖ")
        else:
            await message.answer("‚ùå")
        if int(data["q_order"]) > 0:
            cur.execute("SELECT question_text FROM questions WHERE (test_number, q_order) = (?,?)",
                        (data["test_num"], data["q_order"]))
            msg = ''.join(cur.fetchone())
            await message.answer(msg, reply_markup=kb_abcd)
            await message.answer("–≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç")
            data["q_order"] = int(data["q_order"]) - 1
        else:
            await FSMtake_test.next()
            await message.answer("—Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –µ—â—ë —Ä–∞–∑?", reply_markup=yesno_kb)


@dp.message_handler(state=FSMtake_test.redo)
async def redo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if message.text == "–¥–∞":
            cur.execute("SELECT question_number FROM texts WHERE order_text = '%s'" % data["test_num"])
            data["q_q"] = int(''.join(map(str, cur.fetchone())))
            (data['test_num'], data['q_order']) = await sending_question(message)
            score = data["rn_count"] / data["q_q"] * 100
            cur.execute(
                "SELECT tests_taken, average_score FROM users WHERE user_id = '%s'" % message.from_user.id)
            data_obj = cur.fetchall()[0]
            (tt, asc) = (int(data_obj[0]), int(data_obj[1]))
            update_average_score(tt, asc, score, message)
            data['rn_count'] = 0
            await FSMtake_test.answer_question.set()
        else:
            cur.execute("SELECT question_number FROM texts WHERE order_text = '%s'" % data["test_num"])
            data["q_q"] = int(''.join(map(str, cur.fetchone())))
            score = data["rn_count"] / data["q_q"] * 100
            msg = "–≤–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç " + str(int(score)) + "%"
            await message.answer(msg)
            cur.execute(
                "SELECT text_num, tests_taken, average_score FROM users WHERE user_id = '%s'" % message.from_user.id)
            data_obj = cur.fetchall()[0]
            (tn, tt, asc) = (int(data_obj[0]), int(data_obj[1]), float(data_obj[2]))
            cur.execute("UPDATE users SET text_num = ? WHERE user_id = ?", (tn + 1, message.from_user.id))
            update_average_score(tt, asc, score, message)
            await state.finish()
            await message.answer("–¥–æ—Å–≤–∏–¥–∞–Ω–∏—è, —É–≤–∏–¥–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑", reply_markup=standart_kb)


@dp.message_handler()
async def no_fn(message: types.Message):
    await message.reply("—Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç", reply_markup=standart_kb)
